{"version":3,"sources":["components/navi/Cart.jsx","components/navi/Navi.jsx","components/product/ProductList.jsx","components/category/CategoryList.jsx","App.js","serviceWorker.js","index.js"],"names":["Cart","UncontrolledDropdown","nav","inNavbar","DropdownToggle","caret","DropdownMenu","right","this","props","cart","map","cartItem","DropdownItem","key","product","id","Badge","onClick","removeFromCart","color","productName","quantity","NavItem","NavLink","length","renderSummary","renderEmpty","Component","Navi","Navbar","dark","expand","NavbarBrand","href","Nav","className","navbar","ProductList","products","scope","unitsInStock","unitPrice","Button","addToCart","currentProducts","currentCategory","Table","responsive","renderCurrentProducts","renderProducts","CategoryList","state","categories","ListGroup","category","ListGroupItem","handleCategory","active","categoryName","style","border","App","categoryId","setState","getProducts","newCart","addedItem","find","c","push","alerytify","success","filter","error","cProducts","Container","Row","Col","xs","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.35c30904.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport {\r\n    UncontrolledDropdown,\r\n    DropdownToggle,\r\n    DropdownMenu,\r\n    DropdownItem,\r\n    Badge,\r\n    NavItem,\r\n    NavLink,} from \"reactstrap\"\r\n\r\n class Cart extends Component {\r\n    renderSummary(){\r\n        return (\r\n            <UncontrolledDropdown nav inNavbar>\r\n            <DropdownToggle nav caret>\r\n               Your Cart\r\n            </DropdownToggle>\r\n            <DropdownMenu right>\r\n                {\r\n                    this.props.cart.map(cartItem =>(\r\n                      <DropdownItem key={cartItem.product.id}>\r\n                         <Badge onClick={()=>this.props.removeFromCart(cartItem)} color=\"danger\">x</Badge> {cartItem.product.productName} <Badge  color=\"success\">{cartItem.quantity}</Badge>\r\n                      </DropdownItem>\r\n                    ))\r\n                }\r\n             \r\n              \r\n            </DropdownMenu>\r\n          </UncontrolledDropdown>\r\n        )\r\n    }\r\n    renderEmpty(){\r\n        return (\r\n            <NavItem>\r\n                <NavLink>\r\n                    Empty Cart\r\n                </NavLink>\r\n            </NavItem>\r\n        )\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n               {this.props.cart.length>0?this.renderSummary():this.renderEmpty()}\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Cart;","import React, { Component } from 'react';\r\nimport {\r\n  Navbar,\r\n  NavbarBrand,\r\n  Nav,\r\n  NavItem,\r\n  NavLink,\r\n} from 'reactstrap';\r\nimport Cart from './Cart';\r\n\r\nclass  Navi extends Component{\r\n    render(){\r\n        return (\r\n    <div>\r\n      <Navbar color=\"dark\" dark expand=\"md\">\r\n        <NavbarBrand href=\"/\">PROJE</NavbarBrand>\r\n          <Nav className=\"ml-auto\" navbar>\r\n            <NavItem>\r\n  <NavLink href=\"/components/\"></NavLink>\r\n            </NavItem>\r\n            <Cart cart={this.props.cart} removeFromCart={this.props.removeFromCart}/>\r\n          </Nav>\r\n      </Navbar>\r\n    </div>\r\n  );\r\n    }\r\n  \r\n}\r\n\r\nexport default Navi;","import React, { Component } from \"react\";\r\nimport {Table,Button, Badge} from \"reactstrap\";\r\nclass ProductList extends Component {\r\n  renderProducts(){\r\n    return (\r\n      <tbody>\r\n      {\r\n        this.props.products.map(product => (\r\n        <tr key ={product.id}>\r\n        <th scope=\"row\">{product.id}</th>\r\n        <td>{product.productName}</td>\r\n        <td>{product.unitsInStock}</td>\r\n        <td>{product.unitPrice}</td>\r\n        <td><Button color=\"success\" onClick={()=>this.props.addToCart(product)}>Add</Button></td>\r\n        </tr>\r\n        ))\r\n      }\r\n  </tbody>\r\n    )\r\n  }\r\n  renderCurrentProducts(){\r\n    return (\r\n      <tbody>\r\n      {\r\n        this.props.currentProducts.map(product => (\r\n        <tr key ={product.id}>\r\n        <th scope=\"row\">{product.id}</th>\r\n        <td>{product.productName}</td>\r\n        <td>{product.unitsInStock}</td>\r\n        <td>{product.unitPrice}</td>\r\n        <td><Button color=\"success\" onClick={()=>this.props.addToCart(product)}>Add</Button></td>\r\n        </tr>\r\n        ))\r\n      }\r\n  </tbody>\r\n    )\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1><Badge color=\"success\">{this.props.currentCategory}</Badge></h1>\r\n        <Table responsive>\r\n          <thead>\r\n            <tr>\r\n              <th>#</th>\r\n              <th>Product Name</th>\r\n              <th>Units In Stock</th>\r\n              <th>Unit Price</th>\r\n              <th></th>\r\n            </tr>\r\n          </thead>\r\n          {\r\n            this.props.currentCategory.length>0?this.renderCurrentProducts():this.renderProducts()\r\n          }\r\n        </Table>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default ProductList;","import React, { Component } from \"react\";\r\nimport { ListGroup, ListGroupItem } from \"reactstrap\";\r\n\r\nclass CategoryList extends Component {\r\n  state = { categories: [{\r\n    \"id\": 1,\r\n    \"categoryName\": \"Soguk Icecekler\"\r\n  },\r\n  {\r\n    \"id\": 2,\r\n    \"categoryName\": \"Klasik Kahveler\"\r\n  },\r\n  {\r\n    \"id\": 3,\r\n    \"categoryName\": \"Bitki Çayları\"\r\n  },\r\n  {\r\n    \"id\": 4,\r\n    \"categoryName\": \"Milkshake\"\r\n  },\r\n  {\r\n    \"id\": 5,\r\n    \"categoryName\": \"Smoothie\"\r\n  },\r\n  {\r\n    \"id\": 6,\r\n    \"categoryName\": \"Espressolu Kahveler\"\r\n  }] };\r\n  // componentDidMount() {\r\n  //   this.getCategories();\r\n  // }\r\n  // getCategories() {\r\n  //   fetch(\"http://localhost:3000/categories\")\r\n  //     .then((r) => r.json())\r\n  //     .then((data) => this.setState({ categories: data }));\r\n  // }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>Categories</h1>\r\n        <ListGroup  className=\"list\">\r\n          {this.state.categories.map((category) => (\r\n            <ListGroupItem key={category.id} onClick={() => this.props.handleCategory(category)} active={category.categoryName===this.props.currentCategory?true:false} style={{border:\"none\"}}>\r\n              {category.categoryName}\r\n            </ListGroupItem>\r\n          ))}\r\n        </ListGroup>\r\n        \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CategoryList;\r\n","import React, { Component } from \"react\";\nimport Navi from \"./components/navi/Navi\";\nimport ProductList from \"./components/product/ProductList\";\nimport CategoryList from \"./components/category/CategoryList\";\nimport { Row, Col, Container } from \"reactstrap\";\nimport alerytify from \"alertifyjs\";\n\nclass App extends Component {\n  state = {\n    products: [\n      {\n        id: 53,\n        categoryId: 6,\n        productName: \"Cappuccino\",\n        unitPrice: \"10\",\n        unitsInStock: \"50\",\n      },\n      {\n        id: 45,\n        categoryId: 5,\n        productName: \"Çilekli Smoothie\",\n        unitPrice: \"10\",\n        unitsInStock: \"50\",\n      },\n      {\n        id: 41,\n        categoryId: 4,\n        productName: \"Limonlu Milkshake\",\n        unitPrice: \"10\",\n        unitsInStock: \"50\",\n      },\n      {\n        id: 34,\n        categoryId: 3,\n        productName: \"Papatya Çayı\",\n        unitPrice: \"5\",\n        unitsInStock: \"100\",\n      },\n      {\n        id: 23,\n        categoryId: 2,\n        productName: \"Klasik Türk Kahvesi\",\n        unitPrice: \"8\",\n        unitsInStock: \"100\",\n      },\n      {\n        id: 14,\n        categoryId: 1,\n        productName: \"Soda\",\n        unitPrice: \"5\",\n        unitsInStock: \"1000\",\n      },\n    ],\n    currentCategory: \"\",\n    cart: [],\n    currentProducts:[]\n  };\n  // componentDidMount() {\n  //   this.getProducts();\n  // }\n  getProducts(categoryId) {\n    let cProducts = this.state.products.filter(c=>c.categoryId===categoryId)\n    this.setState({currentProducts:cProducts})\n  }\n  handleCategory = (category) => {\n    this.setState({ currentCategory: category.categoryName });\n    this.getProducts(category.id);\n  };\n  addToCart = (product) => {\n    let newCart = this.state.cart;\n    var addedItem = newCart.find((c) => c.product.id === product.id);\n    if (addedItem) {\n      addedItem.quantity += 1;\n    } else {\n      newCart.push({ product: product, quantity: 1 });\n    }\n    this.setState({ cart: newCart });\n    alerytify.success(product.productName + \" sepete eklendi!\")\n  };\n  removeFromCart=(cartItem)=>{\n     let newCart = this.state.cart.filter(c=>c.product.id !== cartItem.product.id)\n     this.setState({cart:newCart})\n     alerytify.error(cartItem.product.productName + \" sepete eklendi!\")\n  }\n  render() {\n    return (\n      <Container>\n        <Navi cart={this.state.cart} removeFromCart={this.removeFromCart} />\n        <Row>\n          <Col xs=\"3\">\n            <CategoryList\n              handleCategory={this.handleCategory}\n              currentCategory={this.state.currentCategory}\n            />\n          </Col>\n          <Col xs=\"9\">\n            <ProductList\n              products={this.state.products}\n              currentCategory={this.state.currentCategory}\n              addToCart={this.addToCart}\n              currentProducts={this.state.currentProducts}\n            />\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport \"bootstrap/dist/css/bootstrap.min.css\"\nimport \"alertifyjs/build/css/alertify.min.css\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}